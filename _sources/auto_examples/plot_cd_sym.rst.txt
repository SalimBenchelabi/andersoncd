
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cd_sym.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cd_sym.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cd_sym.py:


Convergence of CD, pseudo-symmetric CD, and their Anderson versions
==================================================================

On least squares and logistic regression, performance of pseudo-symmetric
coordinate descent.

.. GENERATED FROM PYTHON SOURCE LINES 9-31

.. code-block:: default

    from collections import defaultdict
    import time

    import numpy as np
    import seaborn as sns
    from scipy import sparse
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from scipy.sparse.linalg import cg, svds
    from scipy.optimize import fmin_l_bfgs_b
    from libsvmdata import fetch_libsvm

    from andersoncd.plot_utils import configure_plt, _plot_legend_apart
    from andersoncd.lasso import solver_enet, primal_enet
    from andersoncd.logreg import solver_logreg, primal_logreg


    save_fig = False
    # save_fig = True

    configure_plt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    usetex mode requires TeX.




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load the data:

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    dataset = "real-sim"
    n_features = 1000
    X, y = fetch_libsvm(dataset)

    X = X[:, :n_features]
    X.multiply(1 / sparse.linalg.norm(X, axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset: real-sim

    <72309x1000 sparse matrix of type '<class 'numpy.float64'>'
    	with 1124310 stored elements in COOrdinate format>



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Generate figures for both Least Squares and Logistic regression

.. GENERATED FROM PYTHON SOURCE LINES 43-188

.. code-block:: default

    for pb in ("ols", "logreg"):
        if pb == 'lasso':
            y -= y.mean()
            y /= norm(y)

        f_gap = 10
        tol = 1e-15
        max_iter = 1000

        t_start = time.time()
        t_optimal = []
        # run "best algorithm": conj. grad. for LS, LBFGS for logreg:
        E_optimal = []
        if pb == "logreg":
            rho = svds(X, k=1)[1][0] ** 2 / 100_000  # a bit of enet regularization
            E_optimal.append(np.log(2) * len(y))
            t_optimal.append(0)
            label_opt = "L-BFGS"
            tmax = 20
            t_start = time.time()

            def callback(x):
                pobj = primal_logreg(X @ x, y, x, 0, rho)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            def obj(x):
                return np.log(1 + np.exp(- y * (X @ x))).sum() + rho * x @ x / 2

            def fprime(x):
                return - X.T @ (y / (1 + np.exp(y * (X @ x)))) + rho * x

            fmin_l_bfgs_b(obj, np.zeros(
                X.shape[1]), fprime=fprime, callback=callback, factr=0.01, pgtol=0,
                maxiter=max_iter)
        else:
            alpha = 0
            rho = 0  # no elastic net
            E_optimal.append(norm(y) ** 2 / 2)
            t_optimal.append(0)
            label_opt = "conjugate grad."
            t_start = time.time()
            tmax = 3

            def callback(x):
                pobj = primal_enet(y - X @ x, x, alpha)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            cg(X.T @ X, X.T @ y, callback=callback, maxiter=max_iter, tol=1e-32)
        E_optimal = np.array(E_optimal)

        all_algos = [
            ('cd', False),
            ('cd', True),
            ('cdsym', False),
            ('cdsym', True),
            ('rcd', False),
        ]

        dict_coef = defaultdict(lambda: 1)
        dict_coef['cdsym'] = 2
        algo_names = {}
        algo_names["cd", False] = "CD"
        algo_names["rcd", False] = "RCD"
        algo_names["cdsym", False] = "CD sym"
        algo_names["cd", True] = "CD - Anderson"
        algo_names["cdsym", True] = "CD sym - Anderson"

        dict_Es = {}
        dict_times = {}

        for algo in all_algos:
            print("Running %s" % algo_names[algo])
            if pb == "ols":
                _, E, _, times = solver_enet(
                    X, y, alpha=alpha, f_gap=f_gap,
                    max_iter=int(max_iter/dict_coef[algo[0]]), tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            elif pb == "logreg":
                _, E, _, times = solver_logreg(
                    X, y, alpha=alpha, rho=rho, f_gap=f_gap,
                    max_iter=max_iter//dict_coef[algo[0]], tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            dict_Es[algo] = E
            dict_times[algo] = times

        current_palette = sns.color_palette("colorblind")
        dict_color = {}
        dict_color["cd"] = current_palette[1]
        dict_color['cdsym'] = current_palette[2]
        dict_color["rcd"] = current_palette[3]

        p_star = E_optimal[-1]
        for E in dict_Es.values():
            p_star = min(p_star, min(E))

        plt.close('all')
        fig, ax = plt.subplots(figsize=(10, 5))
        for algo in all_algos:
            E = dict_Es[algo]
            use_acc = algo[1]
            linestyle = 'dashed' if use_acc else 'solid'
            ax.semilogy(
                dict_times[algo],
                # dict_coef[algo[0]] * f_gap * np.arange(len(E)),
                E - p_star,
                label=algo_names[algo],
                color=dict_color[algo[0]], linestyle=linestyle)

        ax.semilogy(
            t_optimal,
            # np.arange(len(E_optimal)),
            E_optimal - p_star,
            label=label_opt, color='black', linestyle='dashdot')

        dict_dataset = {}
        dict_dataset["rcv1.binary"] = "rcv1"
        dict_dataset["real-sim"] = "real_sim"  # use _ not - for latex
        dict_dataset["leukemia"] = "leukemia"

        str_info = "%s (%i st columns)" % (dataset, n_features)
        title = pb + str_info

        plt.ylabel(r"Suboptimality")
        plt.xlabel(r"Time (s)")
        plt.xlim((0, tmax))
        plt.ylim((1e-10, None))
        plt.tight_layout()

        if save_fig:
            fig_dir = ""
            fig_dir_svg = ""
            fig.savefig(
                "%senergies_cdsym_%s_time.pdf" % (fig_dir, pb),
                bbox_inches="tight")
            fig.savefig(
                "%senergies_cdsym_%s_time.svg" % (fig_dir, pb),
                bbox_inches="tight")
            _plot_legend_apart(
                ax, "%senergies_cdsym_%s_legend.pdf" % (fig_dir, pb), ncol=4)

        plt.legend()
        plt.title(title.replace('_', ' '))
        plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_cd_sym_001.png
    :alt: logregreal-sim (1000 st columns)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running CD
    Running CD - Anderson
    Running CD sym
    Running CD sym - Anderson
    Running RCD
    Running CD
    elapsed time: 0.000666 
    elapsed time: 0.706140 
    elapsed time: 1.071686 
    elapsed time: 1.424289 
    elapsed time: 1.799133 
    elapsed time: 2.154876 
    elapsed time: 2.513427 
    elapsed time: 2.874255 
    elapsed time: 3.223403 
    elapsed time: 3.595470 
    elapsed time: 3.942919 
    elapsed time: 4.308055 
    elapsed time: 4.670956 
    elapsed time: 5.025977 
    elapsed time: 5.397417 
    elapsed time: 5.749406 
    elapsed time: 6.110284 
    elapsed time: 6.473756 
    elapsed time: 6.820920 
    elapsed time: 7.193668 
    elapsed time: 7.540769 
    elapsed time: 7.907030 
    elapsed time: 8.267592 
    elapsed time: 8.619419 
    elapsed time: 8.990499 
    elapsed time: 9.327177 
    elapsed time: 9.697439 
    elapsed time: 10.049231 
    elapsed time: 10.410045 
    elapsed time: 10.772467 
    elapsed time: 11.122141 
    elapsed time: 11.493505 
    elapsed time: 11.834343 
    elapsed time: 12.201376 
    elapsed time: 12.563670 
    elapsed time: 12.918099 
    elapsed time: 13.289085 
    elapsed time: 13.631626 
    elapsed time: 14.001659 
    elapsed time: 14.356165 
    elapsed time: 14.714377 
    elapsed time: 15.082922 
    elapsed time: 15.427915 
    elapsed time: 15.800332 
    elapsed time: 16.147105 
    elapsed time: 16.509324 
    elapsed time: 16.868014 
    elapsed time: 17.219306 
    elapsed time: 17.591445 
    elapsed time: 17.937201 
    elapsed time: 18.303371 
    elapsed time: 18.651710 
    elapsed time: 19.009638 
    elapsed time: 19.372370 
    elapsed time: 19.722430 
    elapsed time: 20.090440 
    Running CD - Anderson
    elapsed time: 0.000674 
    elapsed time: 0.379097 
    elapsed time: 0.753660 
    elapsed time: 1.114525 
    elapsed time: 1.482622 
    elapsed time: 1.861178 
    elapsed time: 2.212816 
    elapsed time: 2.582088 
    elapsed time: 2.959691 
    elapsed time: 3.319174 
    elapsed time: 3.688153 
    elapsed time: 4.068099 
    elapsed time: 4.431311 
    elapsed time: 4.792935 
    elapsed time: 5.170033 
    elapsed time: 5.531401 
    elapsed time: 5.893885 
    elapsed time: 6.273175 
    elapsed time: 6.640204 
    elapsed time: 6.999363 
    elapsed time: 7.373151 
    elapsed time: 7.733003 
    elapsed time: 8.095913 
    elapsed time: 8.470245 
    elapsed time: 8.834652 
    elapsed time: 9.195476 
    elapsed time: 9.576509 
    elapsed time: 9.948319 
    elapsed time: 10.302738 
    elapsed time: 10.683111 
    elapsed time: 11.059199 
    elapsed time: 11.410001 
    elapsed time: 11.787293 
    elapsed time: 12.167431 
    elapsed time: 12.520417 
    elapsed time: 12.892898 
    elapsed time: 13.271918 
    elapsed time: 13.629988 
    elapsed time: 13.996210 
    elapsed time: 14.375968 
    elapsed time: 14.722866 
    elapsed time: 15.092131 
    elapsed time: 15.469714 
    elapsed time: 15.824478 
    elapsed time: 16.195210 
    elapsed time: 16.575119 
    elapsed time: 16.935858 
    elapsed time: 17.300906 
    elapsed time: 17.677616 
    elapsed time: 18.032838 
    elapsed time: 18.397784 
    elapsed time: 18.777050 
    elapsed time: 19.138801 
    elapsed time: 19.501711 
    elapsed time: 19.876430 
    elapsed time: 20.227897 
    Running CD sym
    elapsed time: 0.000708 
    elapsed time: 0.714073 
    elapsed time: 1.433015 
    elapsed time: 2.156677 
    elapsed time: 2.866296 
    elapsed time: 3.567468 
    elapsed time: 4.277819 
    elapsed time: 4.992125 
    elapsed time: 5.704013 
    elapsed time: 6.416365 
    elapsed time: 7.140122 
    elapsed time: 7.845155 
    elapsed time: 8.563329 
    elapsed time: 9.280971 
    elapsed time: 9.993609 
    elapsed time: 10.705826 
    elapsed time: 11.413972 
    elapsed time: 12.137458 
    elapsed time: 12.862540 
    elapsed time: 13.579794 
    elapsed time: 14.292481 
    elapsed time: 15.005001 
    elapsed time: 15.721975 
    elapsed time: 16.444690 
    elapsed time: 17.168532 
    elapsed time: 17.884875 
    elapsed time: 18.597925 
    elapsed time: 19.310710 
    elapsed time: 20.028327 
    Running CD sym - Anderson
    elapsed time: 0.000699 
    elapsed time: 0.719581 
    elapsed time: 1.448855 
    elapsed time: 2.183639 
    elapsed time: 2.898215 
    elapsed time: 3.619647 
    elapsed time: 4.359910 
    elapsed time: 5.083319 
    elapsed time: 5.803900 
    elapsed time: 6.524084 
    elapsed time: 7.254830 
    elapsed time: 7.986005 
    elapsed time: 8.704719 
    elapsed time: 9.418505 
    elapsed time: 10.157323 
    elapsed time: 10.882079 
    elapsed time: 11.597531 
    elapsed time: 12.317057 
    elapsed time: 13.053643 
    elapsed time: 13.784244 
    elapsed time: 14.493909 
    elapsed time: 15.208973 
    elapsed time: 15.928233 
    elapsed time: 16.671106 
    elapsed time: 17.386889 
    elapsed time: 18.103256 
    elapsed time: 18.826380 
    elapsed time: 19.570143 
    elapsed time: 20.292783 
    Running RCD
    elapsed time: 0.001094 
    elapsed time: 0.364936 
    elapsed time: 0.733831 
    elapsed time: 1.088268 
    elapsed time: 1.461661 
    elapsed time: 1.817806 
    elapsed time: 2.174588 
    elapsed time: 2.539179 
    elapsed time: 2.889532 
    elapsed time: 3.261893 
    elapsed time: 3.625891 
    elapsed time: 3.977678 
    elapsed time: 4.352647 
    elapsed time: 4.704508 
    elapsed time: 5.075924 
    elapsed time: 5.456473 
    elapsed time: 5.815367 
    elapsed time: 6.181696 
    elapsed time: 6.562652 
    elapsed time: 6.917122 
    elapsed time: 7.278540 
    elapsed time: 7.653968 
    elapsed time: 8.043236 
    elapsed time: 8.393636 
    elapsed time: 8.764468 
    elapsed time: 9.129230 
    elapsed time: 9.485653 
    elapsed time: 9.863755 
    elapsed time: 10.229103 
    elapsed time: 10.596635 
    elapsed time: 10.969987 
    elapsed time: 11.333010 
    elapsed time: 11.688955 
    elapsed time: 12.066822 
    elapsed time: 12.434133 
    elapsed time: 12.784031 
    elapsed time: 13.158584 
    elapsed time: 13.507002 
    elapsed time: 13.868776 
    elapsed time: 14.239278 
    elapsed time: 14.602810 
    elapsed time: 14.976652 
    elapsed time: 15.351724 
    elapsed time: 15.700002 
    elapsed time: 16.069515 
    elapsed time: 16.417130 
    elapsed time: 16.779137 
    elapsed time: 17.155514 
    elapsed time: 17.499991 
    elapsed time: 17.871397 
    elapsed time: 18.243009 
    elapsed time: 18.594390 
    elapsed time: 18.960120 
    elapsed time: 19.318954 
    elapsed time: 19.679664 
    elapsed time: 20.056908 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  13.257 seconds)


.. _sphx_glr_download_auto_examples_plot_cd_sym.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cd_sym.py <plot_cd_sym.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cd_sym.ipynb <plot_cd_sym.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
