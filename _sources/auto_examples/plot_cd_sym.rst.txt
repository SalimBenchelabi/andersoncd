
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cd_sym.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cd_sym.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cd_sym.py:


Convergence of CD, pseudo-symmetric CD, and their Anderson versions
==================================================================

On least squares and logistic regression, performance of pseudo-symmetric
coordinate descent.

.. GENERATED FROM PYTHON SOURCE LINES 9-31

.. code-block:: default

    from collections import defaultdict
    import time

    import numpy as np
    import seaborn as sns
    from scipy import sparse
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from scipy.sparse.linalg import cg, svds
    from scipy.optimize import fmin_l_bfgs_b
    from libsvmdata import fetch_libsvm

    from andersoncd.plot_utils import configure_plt, _plot_legend_apart
    from andersoncd.lasso import solver_enet, primal_enet
    from andersoncd.logreg import solver_logreg, primal_logreg


    save_fig = False
    # save_fig = True

    configure_plt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    usetex mode requires TeX.




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load the data:

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    dataset = "real-sim"
    n_features = 1000
    X, y = fetch_libsvm(dataset)

    X = X[:, :n_features]
    X.multiply(1 / sparse.linalg.norm(X, axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset: real-sim

    <72309x1000 sparse matrix of type '<class 'numpy.float64'>'
    	with 1124310 stored elements in COOrdinate format>



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Generate figures for both Least Squares and Logistic regression

.. GENERATED FROM PYTHON SOURCE LINES 43-188

.. code-block:: default

    for pb in ("ols", "logreg"):
        if pb == 'lasso':
            y -= y.mean()
            y /= norm(y)

        f_gap = 10
        tol = 1e-15
        max_iter = 1000

        t_start = time.time()
        t_optimal = []
        # run "best algorithm": conj. grad. for LS, LBFGS for logreg:
        E_optimal = []
        if pb == "logreg":
            rho = svds(X, k=1)[1][0] ** 2 / 100_000  # a bit of enet regularization
            E_optimal.append(np.log(2) * len(y))
            t_optimal.append(0)
            label_opt = "L-BFGS"
            tmax = 20
            t_start = time.time()

            def callback(x):
                pobj = primal_logreg(X @ x, y, x, 0, rho)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            def obj(x):
                return np.log(1 + np.exp(- y * (X @ x))).sum() + rho * x @ x / 2

            def fprime(x):
                return - X.T @ (y / (1 + np.exp(y * (X @ x)))) + rho * x

            fmin_l_bfgs_b(obj, np.zeros(
                X.shape[1]), fprime=fprime, callback=callback, factr=0.01, pgtol=0,
                maxiter=max_iter)
        else:
            alpha = 0
            rho = 0  # no elastic net
            E_optimal.append(norm(y) ** 2 / 2)
            t_optimal.append(0)
            label_opt = "conjugate grad."
            t_start = time.time()
            tmax = 3

            def callback(x):
                pobj = primal_enet(y - X @ x, x, alpha)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            cg(X.T @ X, X.T @ y, callback=callback, maxiter=max_iter, tol=1e-32)
        E_optimal = np.array(E_optimal)

        all_algos = [
            ('cd', False),
            ('cd', True),
            ('cdsym', False),
            ('cdsym', True),
            ('rcd', False),
        ]

        dict_coef = defaultdict(lambda: 1)
        dict_coef['cdsym'] = 2
        algo_names = {}
        algo_names["cd", False] = "CD"
        algo_names["rcd", False] = "RCD"
        algo_names["cdsym", False] = "CD sym"
        algo_names["cd", True] = "CD - Anderson"
        algo_names["cdsym", True] = "CD sym - Anderson"

        dict_Es = {}
        dict_times = {}

        for algo in all_algos:
            print("Running %s" % algo_names[algo])
            if pb == "ols":
                _, E, _, times = solver_enet(
                    X, y, alpha=alpha, f_gap=f_gap,
                    max_iter=int(max_iter/dict_coef[algo[0]]), tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            elif pb == "logreg":
                _, E, _, times = solver_logreg(
                    X, y, alpha=alpha, rho=rho, f_gap=f_gap,
                    max_iter=max_iter//dict_coef[algo[0]], tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            dict_Es[algo] = E
            dict_times[algo] = times

        current_palette = sns.color_palette("colorblind")
        dict_color = {}
        dict_color["cd"] = current_palette[1]
        dict_color['cdsym'] = current_palette[2]
        dict_color["rcd"] = current_palette[3]

        p_star = E_optimal[-1]
        for E in dict_Es.values():
            p_star = min(p_star, min(E))

        plt.close('all')
        fig, ax = plt.subplots(figsize=(10, 5))
        for algo in all_algos:
            E = dict_Es[algo]
            use_acc = algo[1]
            linestyle = 'dashed' if use_acc else 'solid'
            ax.semilogy(
                dict_times[algo],
                # dict_coef[algo[0]] * f_gap * np.arange(len(E)),
                E - p_star,
                label=algo_names[algo],
                color=dict_color[algo[0]], linestyle=linestyle)

        ax.semilogy(
            t_optimal,
            # np.arange(len(E_optimal)),
            E_optimal - p_star,
            label=label_opt, color='black', linestyle='dashdot')

        dict_dataset = {}
        dict_dataset["rcv1.binary"] = "rcv1"
        dict_dataset["real-sim"] = "real_sim"  # use _ not - for latex
        dict_dataset["leukemia"] = "leukemia"

        str_info = "%s (%i st columns)" % (dataset, n_features)
        title = pb + str_info

        plt.ylabel(r"Suboptimality")
        plt.xlabel(r"Time (s)")
        plt.xlim((0, tmax))
        plt.ylim((1e-10, None))
        plt.tight_layout()

        if save_fig:
            fig_dir = ""
            fig_dir_svg = ""
            fig.savefig(
                "%senergies_cdsym_%s_time.pdf" % (fig_dir, pb),
                bbox_inches="tight")
            fig.savefig(
                "%senergies_cdsym_%s_time.svg" % (fig_dir, pb),
                bbox_inches="tight")
            _plot_legend_apart(
                ax, "%senergies_cdsym_%s_legend.pdf" % (fig_dir, pb), ncol=4)

        plt.legend()
        plt.title(title.replace('_', ' '))
        plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_cd_sym_001.png
    :alt: logregreal-sim (1000 st columns)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running CD
    Running CD - Anderson
    Running CD sym
    Running CD sym - Anderson
    Running RCD
    Running CD
    elapsed time: 0.001238 
    elapsed time: 0.878720 
    elapsed time: 1.325592 
    elapsed time: 1.772198 
    elapsed time: 2.211175 
    elapsed time: 2.658292 
    elapsed time: 3.094467 
    elapsed time: 3.540092 
    elapsed time: 3.977792 
    elapsed time: 4.428138 
    elapsed time: 4.870431 
    elapsed time: 5.309653 
    elapsed time: 5.763403 
    elapsed time: 6.200960 
    elapsed time: 6.658751 
    elapsed time: 7.088848 
    elapsed time: 7.540360 
    elapsed time: 7.974900 
    elapsed time: 8.422351 
    elapsed time: 8.869983 
    elapsed time: 9.308213 
    elapsed time: 9.755472 
    elapsed time: 10.191000 
    elapsed time: 10.634515 
    elapsed time: 11.069339 
    elapsed time: 11.513904 
    elapsed time: 11.951451 
    elapsed time: 12.378531 
    elapsed time: 12.836765 
    elapsed time: 13.269200 
    elapsed time: 13.724066 
    elapsed time: 14.163983 
    elapsed time: 14.627985 
    elapsed time: 15.072702 
    elapsed time: 15.508422 
    elapsed time: 15.945563 
    elapsed time: 16.376099 
    elapsed time: 16.815884 
    elapsed time: 17.265190 
    elapsed time: 17.699999 
    elapsed time: 18.147815 
    elapsed time: 18.576863 
    elapsed time: 19.020794 
    elapsed time: 19.469398 
    elapsed time: 19.899423 
    elapsed time: 20.347096 
    Running CD - Anderson
    elapsed time: 0.001112 
    elapsed time: 0.450456 
    elapsed time: 0.894140 
    elapsed time: 1.345090 
    elapsed time: 1.776679 
    elapsed time: 2.251235 
    elapsed time: 2.711268 
    elapsed time: 3.142775 
    elapsed time: 3.592456 
    elapsed time: 4.051326 
    elapsed time: 4.492046 
    elapsed time: 4.941939 
    elapsed time: 5.381854 
    elapsed time: 5.835126 
    elapsed time: 6.279602 
    elapsed time: 6.744852 
    elapsed time: 7.178682 
    elapsed time: 7.647134 
    elapsed time: 8.094557 
    elapsed time: 8.541822 
    elapsed time: 8.998942 
    elapsed time: 9.454048 
    elapsed time: 9.894608 
    elapsed time: 10.351167 
    elapsed time: 10.810861 
    elapsed time: 11.255744 
    elapsed time: 11.725111 
    elapsed time: 12.171186 
    elapsed time: 12.629338 
    elapsed time: 13.073936 
    elapsed time: 13.536066 
    elapsed time: 13.966060 
    elapsed time: 14.420035 
    elapsed time: 14.859893 
    elapsed time: 15.304857 
    elapsed time: 15.755014 
    elapsed time: 16.207833 
    elapsed time: 16.652654 
    elapsed time: 17.112624 
    elapsed time: 17.557870 
    elapsed time: 18.005667 
    elapsed time: 18.451440 
    elapsed time: 18.905769 
    elapsed time: 19.350946 
    elapsed time: 19.808225 
    elapsed time: 20.258777 
    Running CD sym
    elapsed time: 0.000715 
    elapsed time: 0.903805 
    elapsed time: 1.789953 
    elapsed time: 2.660796 
    elapsed time: 3.545489 
    elapsed time: 4.422951 
    elapsed time: 5.299795 
    elapsed time: 6.190077 
    elapsed time: 7.076991 
    elapsed time: 7.941138 
    elapsed time: 8.818548 
    elapsed time: 9.706996 
    elapsed time: 10.594540 
    elapsed time: 11.467284 
    elapsed time: 12.332883 
    elapsed time: 13.205875 
    elapsed time: 14.101019 
    elapsed time: 14.989812 
    elapsed time: 15.856209 
    elapsed time: 16.716002 
    elapsed time: 17.601550 
    elapsed time: 18.492710 
    elapsed time: 19.364791 
    elapsed time: 20.230970 
    Running CD sym - Anderson
    elapsed time: 0.001164 
    elapsed time: 0.887847 
    elapsed time: 1.783006 
    elapsed time: 2.684755 
    elapsed time: 3.584027 
    elapsed time: 4.481004 
    elapsed time: 5.364178 
    elapsed time: 6.237484 
    elapsed time: 7.126916 
    elapsed time: 8.007105 
    elapsed time: 8.892592 
    elapsed time: 9.787751 
    elapsed time: 10.677521 
    elapsed time: 11.569530 
    elapsed time: 12.462083 
    elapsed time: 13.352122 
    elapsed time: 14.226249 
    elapsed time: 15.145015 
    elapsed time: 16.033253 
    elapsed time: 16.924307 
    elapsed time: 17.832724 
    elapsed time: 18.726521 
    elapsed time: 19.596256 
    elapsed time: 20.494819 
    Running RCD
    elapsed time: 0.000710 
    elapsed time: 0.457029 
    elapsed time: 0.902233 
    elapsed time: 1.344517 
    elapsed time: 1.794159 
    elapsed time: 2.226484 
    elapsed time: 2.684854 
    elapsed time: 3.108671 
    elapsed time: 3.543705 
    elapsed time: 3.988309 
    elapsed time: 4.441017 
    elapsed time: 4.884945 
    elapsed time: 5.311859 
    elapsed time: 5.754957 
    elapsed time: 6.196520 
    elapsed time: 6.637408 
    elapsed time: 7.089017 
    elapsed time: 7.538358 
    elapsed time: 8.006252 
    elapsed time: 8.443758 
    elapsed time: 8.898937 
    elapsed time: 9.337789 
    elapsed time: 9.781595 
    elapsed time: 10.216196 
    elapsed time: 10.661822 
    elapsed time: 11.111523 
    elapsed time: 11.571913 
    elapsed time: 12.007616 
    elapsed time: 12.465204 
    elapsed time: 12.911547 
    elapsed time: 13.367071 
    elapsed time: 13.810631 
    elapsed time: 14.283538 
    elapsed time: 14.748508 
    elapsed time: 15.196194 
    elapsed time: 15.617590 
    elapsed time: 16.059684 
    elapsed time: 16.494887 
    elapsed time: 16.917035 
    elapsed time: 17.368961 
    elapsed time: 17.813251 
    elapsed time: 18.262873 
    elapsed time: 18.703514 
    elapsed time: 19.156028 
    elapsed time: 19.595102 
    elapsed time: 20.026455 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  19.840 seconds)


.. _sphx_glr_download_auto_examples_plot_cd_sym.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cd_sym.py <plot_cd_sym.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cd_sym.ipynb <plot_cd_sym.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
