
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cd_sym.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cd_sym.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cd_sym.py:


Convergence of CD, pseudo-symmetric CD, and their Anderson versions
==================================================================

On least squares and logistic regression, performance of pseudo-symmetric
coordinate descent.

.. GENERATED FROM PYTHON SOURCE LINES 9-31

.. code-block:: default

    from collections import defaultdict
    import time

    import numpy as np
    import seaborn as sns
    from scipy import sparse
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from scipy.sparse.linalg import cg, svds
    from scipy.optimize import fmin_l_bfgs_b
    from libsvmdata import fetch_libsvm

    from andersoncd.plot_utils import configure_plt, _plot_legend_apart
    from andersoncd.lasso import solver_enet, primal_enet
    from andersoncd.logreg import solver_logreg, primal_logreg


    save_fig = False
    # save_fig = True

    configure_plt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    usetex mode requires TeX.




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load the data:

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    dataset = "real-sim"
    n_features = 1000
    X, y = fetch_libsvm(dataset)

    X = X[:, :n_features]
    X.multiply(1 / sparse.linalg.norm(X, axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset: real-sim

    <72309x1000 sparse matrix of type '<class 'numpy.float64'>'
    	with 1124310 stored elements in COOrdinate format>



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Generate figures for both Least Squares and Logistic regression

.. GENERATED FROM PYTHON SOURCE LINES 43-188

.. code-block:: default

    for pb in ("ols", "logreg"):
        if pb == 'lasso':
            y -= y.mean()
            y /= norm(y)

        f_gap = 10
        tol = 1e-15
        max_iter = 1000

        t_start = time.time()
        t_optimal = []
        # run "best algorithm": conj. grad. for LS, LBFGS for logreg:
        E_optimal = []
        if pb == "logreg":
            rho = svds(X, k=1)[1][0] ** 2 / 100_000  # a bit of enet regularization
            E_optimal.append(np.log(2) * len(y))
            t_optimal.append(0)
            label_opt = "L-BFGS"
            tmax = 20
            t_start = time.time()

            def callback(x):
                pobj = primal_logreg(X @ x, y, x, 0, rho)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            def obj(x):
                return np.log(1 + np.exp(- y * (X @ x))).sum() + rho * x @ x / 2

            def fprime(x):
                return - X.T @ (y / (1 + np.exp(y * (X @ x)))) + rho * x

            fmin_l_bfgs_b(obj, np.zeros(
                X.shape[1]), fprime=fprime, callback=callback, factr=0.01, pgtol=0,
                maxiter=max_iter)
        else:
            alpha = 0
            rho = 0  # no elastic net
            E_optimal.append(norm(y) ** 2 / 2)
            t_optimal.append(0)
            label_opt = "conjugate grad."
            t_start = time.time()
            tmax = 3

            def callback(x):
                pobj = primal_enet(y - X @ x, x, alpha)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            cg(X.T @ X, X.T @ y, callback=callback, maxiter=max_iter, tol=1e-32)
        E_optimal = np.array(E_optimal)

        all_algos = [
            ('cd', False),
            ('cd', True),
            ('cdsym', False),
            ('cdsym', True),
            ('rcd', False),
        ]

        dict_coef = defaultdict(lambda: 1)
        dict_coef['cdsym'] = 2
        algo_names = {}
        algo_names["cd", False] = "CD"
        algo_names["rcd", False] = "RCD"
        algo_names["cdsym", False] = "CD sym"
        algo_names["cd", True] = "CD - Anderson"
        algo_names["cdsym", True] = "CD sym - Anderson"

        dict_Es = {}
        dict_times = {}

        for algo in all_algos:
            print("Running %s" % algo_names[algo])
            if pb == "ols":
                _, E, _, times = solver_enet(
                    X, y, alpha=alpha, f_gap=f_gap,
                    max_iter=int(max_iter/dict_coef[algo[0]]), tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            elif pb == "logreg":
                _, E, _, times = solver_logreg(
                    X, y, alpha=alpha, rho=rho, f_gap=f_gap,
                    max_iter=max_iter//dict_coef[algo[0]], tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            dict_Es[algo] = E
            dict_times[algo] = times

        current_palette = sns.color_palette("colorblind")
        dict_color = {}
        dict_color["cd"] = current_palette[1]
        dict_color['cdsym'] = current_palette[2]
        dict_color["rcd"] = current_palette[3]

        p_star = E_optimal[-1]
        for E in dict_Es.values():
            p_star = min(p_star, min(E))

        plt.close('all')
        fig, ax = plt.subplots(figsize=(10, 5))
        for algo in all_algos:
            E = dict_Es[algo]
            use_acc = algo[1]
            linestyle = 'dashed' if use_acc else 'solid'
            ax.semilogy(
                dict_times[algo],
                # dict_coef[algo[0]] * f_gap * np.arange(len(E)),
                E - p_star,
                label=algo_names[algo],
                color=dict_color[algo[0]], linestyle=linestyle)

        ax.semilogy(
            t_optimal,
            # np.arange(len(E_optimal)),
            E_optimal - p_star,
            label=label_opt, color='black', linestyle='dashdot')

        dict_dataset = {}
        dict_dataset["rcv1.binary"] = "rcv1"
        dict_dataset["real-sim"] = "real_sim"  # use _ not - for latex
        dict_dataset["leukemia"] = "leukemia"

        str_info = "%s (%i st columns)" % (dataset, n_features)
        title = pb + str_info

        plt.ylabel(r"Suboptimality")
        plt.xlabel(r"Time (s)")
        plt.xlim((0, tmax))
        plt.ylim((1e-10, None))
        plt.tight_layout()

        if save_fig:
            fig_dir = ""
            fig_dir_svg = ""
            fig.savefig(
                "%senergies_cdsym_%s_time.pdf" % (fig_dir, pb),
                bbox_inches="tight")
            fig.savefig(
                "%senergies_cdsym_%s_time.svg" % (fig_dir, pb),
                bbox_inches="tight")
            _plot_legend_apart(
                ax, "%senergies_cdsym_%s_legend.pdf" % (fig_dir, pb), ncol=4)

        plt.legend()
        plt.title(title.replace('_', ' '))
        plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_cd_sym_001.png
    :alt: logregreal-sim (1000 st columns)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running CD
    Running CD - Anderson
    Running CD sym
    Running CD sym - Anderson
    Running RCD
    Running CD
    elapsed time: 0.000633 
    elapsed time: 0.797747 
    elapsed time: 1.180975 
    elapsed time: 1.578293 
    elapsed time: 1.975507 
    elapsed time: 2.362627 
    elapsed time: 2.752737 
    elapsed time: 3.153327 
    elapsed time: 3.547203 
    elapsed time: 3.914962 
    elapsed time: 4.292317 
    elapsed time: 4.668443 
    elapsed time: 5.014580 
    elapsed time: 5.389916 
    elapsed time: 5.780264 
    elapsed time: 6.139038 
    elapsed time: 6.532061 
    elapsed time: 6.916784 
    elapsed time: 7.301812 
    elapsed time: 7.701755 
    elapsed time: 8.083213 
    elapsed time: 8.482168 
    elapsed time: 8.874234 
    elapsed time: 9.274662 
    elapsed time: 9.649348 
    elapsed time: 10.001736 
    elapsed time: 10.403158 
    elapsed time: 10.765857 
    elapsed time: 11.161416 
    elapsed time: 11.498235 
    elapsed time: 11.859275 
    elapsed time: 12.199436 
    elapsed time: 12.565293 
    elapsed time: 12.976465 
    elapsed time: 13.360782 
    elapsed time: 13.732714 
    elapsed time: 14.139475 
    elapsed time: 14.502917 
    elapsed time: 14.870901 
    elapsed time: 15.250815 
    elapsed time: 15.636171 
    elapsed time: 16.021268 
    elapsed time: 16.400110 
    elapsed time: 16.790092 
    elapsed time: 17.162582 
    elapsed time: 17.522591 
    elapsed time: 17.901233 
    elapsed time: 18.266579 
    elapsed time: 18.667702 
    elapsed time: 19.065508 
    elapsed time: 19.397611 
    elapsed time: 19.783839 
    elapsed time: 20.164851 
    Running CD - Anderson
    elapsed time: 0.000618 
    elapsed time: 0.384599 
    elapsed time: 0.781088 
    elapsed time: 1.168160 
    elapsed time: 1.515046 
    elapsed time: 1.916425 
    elapsed time: 2.297208 
    elapsed time: 2.669561 
    elapsed time: 3.023851 
    elapsed time: 3.453050 
    elapsed time: 3.835947 
    elapsed time: 4.258062 
    elapsed time: 4.663343 
    elapsed time: 5.019944 
    elapsed time: 5.453919 
    elapsed time: 5.810633 
    elapsed time: 6.197973 
    elapsed time: 6.603556 
    elapsed time: 6.995611 
    elapsed time: 7.381962 
    elapsed time: 7.797762 
    elapsed time: 8.208438 
    elapsed time: 8.595767 
    elapsed time: 8.987864 
    elapsed time: 9.408015 
    elapsed time: 9.798856 
    elapsed time: 10.211632 
    elapsed time: 10.615658 
    elapsed time: 11.004942 
    elapsed time: 11.414444 
    elapsed time: 11.812390 
    elapsed time: 12.201573 
    elapsed time: 12.599045 
    elapsed time: 12.976351 
    elapsed time: 13.356822 
    elapsed time: 13.744263 
    elapsed time: 14.134389 
    elapsed time: 14.567524 
    elapsed time: 14.944623 
    elapsed time: 15.361639 
    elapsed time: 15.775017 
    elapsed time: 16.122735 
    elapsed time: 16.528308 
    elapsed time: 16.970645 
    elapsed time: 17.348180 
    elapsed time: 17.719192 
    elapsed time: 18.130730 
    elapsed time: 18.518086 
    elapsed time: 18.914063 
    elapsed time: 19.304897 
    elapsed time: 19.712979 
    elapsed time: 20.081386 
    Running CD sym
    elapsed time: 0.000609 
    elapsed time: 0.777720 
    elapsed time: 1.556070 
    elapsed time: 2.296580 
    elapsed time: 2.984276 
    elapsed time: 3.746267 
    elapsed time: 4.469712 
    elapsed time: 5.217222 
    elapsed time: 5.956144 
    elapsed time: 6.741875 
    elapsed time: 7.509630 
    elapsed time: 8.269097 
    elapsed time: 9.025731 
    elapsed time: 9.770687 
    elapsed time: 10.591975 
    elapsed time: 11.371357 
    elapsed time: 12.107046 
    elapsed time: 12.876813 
    elapsed time: 13.655972 
    elapsed time: 14.401065 
    elapsed time: 15.161080 
    elapsed time: 15.939904 
    elapsed time: 16.736216 
    elapsed time: 17.484318 
    elapsed time: 18.262700 
    elapsed time: 19.043545 
    elapsed time: 19.800406 
    elapsed time: 20.592312 
    Running CD sym - Anderson
    elapsed time: 0.000865 
    elapsed time: 0.834339 
    elapsed time: 1.564083 
    elapsed time: 2.349450 
    elapsed time: 3.072488 
    elapsed time: 3.899200 
    elapsed time: 4.667145 
    elapsed time: 5.475005 
    elapsed time: 6.251788 
    elapsed time: 7.011328 
    elapsed time: 7.784828 
    elapsed time: 8.614717 
    elapsed time: 9.432663 
    elapsed time: 10.207038 
    elapsed time: 10.964931 
    elapsed time: 11.755023 
    elapsed time: 12.547609 
    elapsed time: 13.308715 
    elapsed time: 14.119538 
    elapsed time: 14.902208 
    elapsed time: 15.671586 
    elapsed time: 16.471051 
    elapsed time: 17.240210 
    elapsed time: 18.029115 
    elapsed time: 18.814534 
    elapsed time: 19.631034 
    elapsed time: 20.454232 
    Running RCD
    elapsed time: 0.000857 
    elapsed time: 0.366362 
    elapsed time: 0.778919 
    elapsed time: 1.175523 
    elapsed time: 1.554054 
    elapsed time: 1.952381 
    elapsed time: 2.363619 
    elapsed time: 2.775461 
    elapsed time: 3.149988 
    elapsed time: 3.547678 
    elapsed time: 3.942721 
    elapsed time: 4.343640 
    elapsed time: 4.727863 
    elapsed time: 5.127717 
    elapsed time: 5.473801 
    elapsed time: 5.868520 
    elapsed time: 6.264060 
    elapsed time: 6.656201 
    elapsed time: 7.059478 
    elapsed time: 7.425604 
    elapsed time: 7.802388 
    elapsed time: 8.168833 
    elapsed time: 8.560475 
    elapsed time: 8.956078 
    elapsed time: 9.339117 
    elapsed time: 9.692782 
    elapsed time: 10.053166 
    elapsed time: 10.440483 
    elapsed time: 10.815827 
    elapsed time: 11.241609 
    elapsed time: 11.642082 
    elapsed time: 12.003880 
    elapsed time: 12.428510 
    elapsed time: 12.776394 
    elapsed time: 13.236006 
    elapsed time: 13.579056 
    elapsed time: 14.008025 
    elapsed time: 14.366925 
    elapsed time: 14.730161 
    elapsed time: 15.137237 
    elapsed time: 15.540800 
    elapsed time: 15.934995 
    elapsed time: 16.343828 
    elapsed time: 16.733357 
    elapsed time: 17.136235 
    elapsed time: 17.508895 
    elapsed time: 17.941251 
    elapsed time: 18.306781 
    elapsed time: 18.685200 
    elapsed time: 19.108865 
    elapsed time: 19.528563 
    elapsed time: 19.932372 
    elapsed time: 20.328860 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  10.547 seconds)


.. _sphx_glr_download_auto_examples_plot_cd_sym.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cd_sym.py <plot_cd_sym.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cd_sym.ipynb <plot_cd_sym.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
