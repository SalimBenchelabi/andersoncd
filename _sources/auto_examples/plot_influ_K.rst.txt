
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_influ_K.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_influ_K.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_influ_K.py:


Influence of number of extrapolated points K
============================================

How many points must be extrapolated for optimal performance?

.. GENERATED FROM PYTHON SOURCE LINES 7-22

.. code-block:: default


    import numpy as np
    import seaborn as sns
    import matplotlib.pyplot as plt

    from scipy import sparse
    from numpy.linalg import norm
    from libsvmdata import fetch_libsvm

    from andersoncd.plot_utils import configure_plt
    from andersoncd.lasso import solver_enet


    configure_plt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    usetex mode requires TeX.




.. GENERATED FROM PYTHON SOURCE LINES 23-24

Load the data:

.. GENERATED FROM PYTHON SOURCE LINES 24-34

.. code-block:: default


    dataset = "rcv1_train"
    X, y = fetch_libsvm(dataset)
    X = X[:, :1000]

    X.multiply(1 / sparse.linalg.norm(X, axis=0))
    y -= y.mean()
    y /= norm(y)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset: rcv1_train
    Downloading data from https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/rcv1_train.binary.bz2 (13.1 MB)

    file_sizes:   0%|                                   | 0.00/13.7M [00:00<?, ?B/s]    file_sizes:   0%|                           | 24.6k/13.7M [00:00<02:08, 107kB/s]    file_sizes:   0%|                           | 49.2k/13.7M [00:00<02:08, 106kB/s]    file_sizes:   1%|2                           | 106k/13.7M [00:00<01:19, 171kB/s]    file_sizes:   2%|4                           | 221k/13.7M [00:00<00:45, 299kB/s]    file_sizes:   3%|9                           | 451k/13.7M [00:01<00:24, 548kB/s]    file_sizes:   7%|#7                         | 909k/13.7M [00:01<00:12, 1.04MB/s]    file_sizes:  13%|###4                      | 1.83M/13.7M [00:01<00:05, 1.99MB/s]    file_sizes:  27%|######9                   | 3.66M/13.7M [00:01<00:02, 3.85MB/s]    file_sizes:  38%|#########9                | 5.23M/13.7M [00:02<00:01, 4.77MB/s]    file_sizes:  50%|############8             | 6.81M/13.7M [00:02<00:01, 5.39MB/s]    file_sizes:  61%|###############8          | 8.38M/13.7M [00:02<00:00, 5.82MB/s]    file_sizes:  76%|###################8      | 10.5M/13.7M [00:02<00:00, 6.74MB/s]    file_sizes:  88%|######################8   | 12.1M/13.7M [00:03<00:00, 6.75MB/s]    file_sizes:  95%|########################8 | 13.1M/13.7M [00:03<00:00, 6.16MB/s]    file_sizes: 100%|##########################| 13.7M/13.7M [00:03<00:00, 4.22MB/s]
    Successfully downloaded file to /home/circleci/celer_data/libsvm/binary/rcv1_train.binary.bz2
    Decompressing...
    Loading svmlight file...




.. GENERATED FROM PYTHON SOURCE LINES 35-36

Solve the problem for various values of K

.. GENERATED FROM PYTHON SOURCE LINES 36-55

.. code-block:: default


    alpha = 0
    tol = 1e-15
    max_iter = 1000
    f_gap = 10

    K_list = [0, 2, 3, 4, 5, 10, 20]

    dict_Es = {}

    for K in K_list:
        print("Running CD Anderson with K=%d" % K)
        use_acc = K != 0
        w, E, _ = solver_enet(
            X, y, alpha=alpha, f_gap=f_gap, max_iter=max_iter, tol=tol,
            algo="cd", use_acc=use_acc, K=K)
        dict_Es[K] = E






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running CD Anderson with K=0
    Running CD Anderson with K=2
    Running CD Anderson with K=3
    Running CD Anderson with K=4
    Running CD Anderson with K=5
    Running CD Anderson with K=10
    Running CD Anderson with K=20




.. GENERATED FROM PYTHON SOURCE LINES 56-57

Plot results

.. GENERATED FROM PYTHON SOURCE LINES 57-87

.. code-block:: default


    palette = sns.color_palette("colorblind")
    p_star = np.inf
    for E in dict_Es.values():
        p_star = min(p_star, min(E))


    fig, ax = plt.subplots(figsize=[9.3, 5.6])
    for i, K in enumerate(K_list):
        E = dict_Es[K]
        if K == 0:
            label = "CD, no acc"
            linestyle = 'solid'
            color = palette[1]
        else:
            label = "CD, K=%i" % K
            linestyle = 'dashed'
            color = plt.cm.viridis(i / len(K_list))
        ax.semilogy(
            f_gap * np.arange(len(E)), E - p_star,
            label=label, color=color, linestyle=linestyle)


    ax.set_xlabel(r"iteration $k$")
    ax.set_yticks((1e-15, 1e-10, 1e-5, 1))
    ax.set_ylabel(r"$f(x^{(k)}) - f(x^*)$")
    plt.tight_layout()

    plt.legend()
    plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_influ_K_001.png
    :alt: plot influ K
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.006 seconds)


.. _sphx_glr_download_auto_examples_plot_influ_K.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_influ_K.py <plot_influ_K.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_influ_K.ipynb <plot_influ_K.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
